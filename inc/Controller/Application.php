<?phpnamespace Initial\Controller;use Initial\Controller\Controller;class Application extends Controller{  /**   * register default hooks and actions for WordPress   * @return   */  public function register()  {    add_shortcode('show_submission_form', array($this, 'getweb_apply_form'));    add_action('admin_menu', array($this, 'add_my_custom_menu'));    add_action('admin_enqueue_scripts', array($this, 'applicant_asset'));    add_action('wp_ajax_nopriv_save_application_form_data', array(&$this, 'save_application_data'));    add_action('wp_ajax_save_application_form_data', array(&$this, 'save_application_data'));    add_action('wp_ajax_application_delete', array(&$this, 'delete_application_data'));    add_action('wp_ajax_nopriv_application_delete', array(&$this, 'delete_application_data'));    add_action('wp_ajax_application_delete_bulk', array(&$this, 'delete_application_data_bulk'));    add_action('wp_ajax_nopriv_application_delete_bulk', array(&$this, 'delete_application_data_bulk'));  }  //Form  public function getweb_apply_form($atts, $content = null)  {    //[show_apply_form]    $atts = shortcode_atts(      array(),      $atts,      'show_submission_form'    );    ob_start();    echo "<link rel=\"stylesheet\" href=\"$this->plugin_url/assets/application/front/bootstrap-datepicker.min.css\" type=\"text/css\" media=\"all\" />";    echo "<link rel=\"stylesheet\" href=\"$this->plugin_url/assets/application/front/applicant-form.css\" type=\"text/css\" media=\"all\" />";    require_once($this->plugin_path . "/views/application/apply-form.php");    echo "<script src=\"$this->plugin_url/assets/application/front/jquery.min.js\"></script>";    echo "<script src=\"$this->plugin_url/assets/application/front/jquery.caret.js\"></script>";    echo "<script src=\"$this->plugin_url/assets/application/front/jquery.mobilePhoneNumber.js\"></script>";    echo "<script src=\"$this->plugin_url/assets/application/front/bootstrap-datepicker.min.js\"></script>";    echo "<script src=\"$this->plugin_url/assets/application/front/applicant-form.js\"></script>";    return ob_get_clean();  }  public function add_my_custom_menu()  {    add_menu_page("Applicants' List", "Applications", "manage_options", "form-submission", array($this, "applicants_list"), "dashicons-admin-users");    add_submenu_page("form-submission", 'View Application', "", "manage_options", 'applicant_info', array($this, "applicants_view"));  }  public function applicants_list()  {    return require_once("$this->plugin_path/views/application/applicant-list.php");  }  public function applicants_view()  {    return require_once("$this->plugin_path/views/application/applicant-view.php");  }  public function applicant_asset($hook)  {    $applicants = self::get_all_applicant();    if ('toplevel_page_form-submission' == $hook || 'applications_page_applicant_info' == $hook) {      wp_enqueue_style("application-bootstrap", $this->plugin_url . 'assets/application/css/bootstrap.min.css', '', FRONT_END_SUBMISSION_VERSION, 'all');      wp_enqueue_style("application-style", $this->plugin_url . 'assets/application/css/style.css', '', FRONT_END_SUBMISSION_VERSION, 'all');      if (isset($applicants) && count($applicants) > 0) {        wp_enqueue_style("application-form", $this->plugin_url . 'assets/application/front/applicant-form.css', '', FRONT_END_SUBMISSION_VERSION, 'all');        wp_enqueue_script("application-jquery", $this->plugin_url . 'assets/application/js/jquery.min.js', array('jquery'), FRONT_END_SUBMISSION_VERSION, true);        wp_enqueue_script("application-datatables", $this->plugin_url . 'assets/application/js/datatables.min.js', array('jquery'), FRONT_END_SUBMISSION_VERSION, true);        wp_enqueue_script("application-main", $this->plugin_url . 'assets/application/js/main.js', array('jquery'), FRONT_END_SUBMISSION_VERSION, true);      }    }  }  /*=====================================[ Extra Function ]========================================*/  /*=================[ IP ]====================*/  public function getipAddr()  {    if (!empty($_SERVER['HTTP_CLIENT_IP']))   //check ip from share internet    {      $ip = $_SERVER['HTTP_CLIENT_IP'];    } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR']))   //to check ip is pass from proxy    {      $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];    } else {      $ip = $_SERVER['REMOTE_ADDR'];    }    return $ip;  }  /*=================[ Browser ]====================*/  public function getBrowser()  {    $u_agent = $_SERVER['HTTP_USER_AGENT'];    $bname = 'Unknown';    $platform = 'Unknown';    $version = "";    //First get the platform?    if (preg_match('/linux/i', $u_agent)) {      $platform = 'linux';    } elseif (preg_match('/macintosh|mac os x/i', $u_agent)) {      $platform = 'mac';    } elseif (preg_match('/windows|win32/i', $u_agent)) {      $platform = 'windows';    }    // Next get the name of the useragent yes seperately and for good reason    if (preg_match('/MSIE/i', $u_agent) && !preg_match('/Opera/i', $u_agent)) {      $bname = 'Internet Explorer';      $ub = "MSIE";    } elseif (preg_match('/Trident/i', $u_agent)) { // this condition is for IE11      $bname = 'Internet Explorer';      $ub = "rv";    } elseif (preg_match('/Firefox/i', $u_agent)) {      $bname = 'Mozilla Firefox';      $ub = "Firefox";    } elseif (preg_match('/Chrome/i', $u_agent)) {      $bname = 'Google Chrome';      $ub = "Chrome";    } elseif (preg_match('/Safari/i', $u_agent)) {      $bname = 'Apple Safari';      $ub = "Safari";    } elseif (preg_match('/Opera/i', $u_agent)) {      $bname = 'Opera';      $ub = "Opera";    } elseif (preg_match('/Netscape/i', $u_agent)) {      $bname = 'Netscape';      $ub = "Netscape";    }    // finally get the correct version number    // Added "|:"    $known = array('Version', $ub, 'other');    $pattern = '#(?<browser>' . join('|', $known) .      ')[/|: ]+(?<version>[0-9.|a-zA-Z.]*)#';    if (!preg_match_all($pattern, $u_agent, $matches)) {      // we have no matching number just continue    }    // see how many we have    $i = count($matches['browser']);    if ($i != 1) {      //we will have two since we are not using 'other' argument yet      //see if version is before or after the name      if (strripos($u_agent, "Version") < strripos($u_agent, $ub)) {        $version = $matches['version'][0];      } else {        $version = $matches['version'][1];      }    } else {      $version = $matches['version'][0];    }    // check if we have a number    if ($version == null || $version == "") {      $version = "?";    }    return array(      'userAgent' => $u_agent,      'name' => $bname,      'version' => $version,      'platform' => $platform,      'pattern' => $pattern    );  }  /*=================[ Age Calculator ]====================*/  public function ageCalculate($birthDate)  {    $birthDate = explode("/", $birthDate);//get age from date or birthdate    $age = (date("md", date("U", mktime(0, 0, 0, $birthDate[0], $birthDate[1], $birthDate[2]))) > date("md")      ? ((date("Y") - $birthDate[2]) - 1)      : (date("Y") - $birthDate[2]));    return $age;  }  public function year_month_day($dob)  {    $localtime = getdate();    $today = $localtime['mday'] . "-" . $localtime['mon'] . "-" . $localtime['year'];    $dob_a = explode("-", $dob);    $today_a = explode("-", $today);    $dob_d = $dob_a[0];    $dob_m = $dob_a[1];    $dob_y = $dob_a[2];    $today_d = $today_a[0];    $today_m = $today_a[1];    $today_y = $today_a[2];    $years = $today_y - $dob_y;    $months = $today_m - $dob_m;    $days = $today_d - $dob_d;    if ($today_m . $today_d < $dob_m . $dob_d) {      $years--;      $months = 12 + $today_m - $dob_m;    }    if ($today_d < $dob_d) {      $months--;    }    $firstMonths = array(1, 3, 5, 7, 8, 10, 12);    $secondMonths = array(4, 6, 9, 11);    $thirdMonths = array(2);    if ($today_m - $dob_m == 1) {      if (in_array($dob_m, $firstMonths)) {        array_push($firstMonths, 0);      } elseif (in_array($dob_m, $secondMonths)) {        array_push($secondMonths, 0);      } elseif (in_array($dob_m, $thirdMonths)) {        array_push($thirdMonths, 0);      }    }    $str_day = ($days == 0 || $days == 1) ? 'Day' : 'Days';    $str_month = $months == 1 || $months == 0 ? 'Month' : 'Months';    return " $years Years $months $str_month $days $str_day";  }  /*=================[ Country ]====================*/  public static function get_all_countries()  {    return array(      'AF' => 'Afghanistan',      'AL' => 'Albania',      'DZ' => 'Algeria',      'AD' => 'Andorra',      'AO' => 'Angola',      'AI' => 'Anguilla',      'AQ' => 'Antarctica',      'AG' => 'Antigua and Barbuda',      'AR' => 'Argentina',      'AM' => 'Armenia',      'AW' => 'Aruba',      'AU' => 'Australia',      'AT' => 'Austria',      'AZ' => 'Azerbaijan',      'BS' => 'Bahamas',      'BH' => 'Bahrain',      'BD' => 'Bangladesh',      'BB' => 'Barbados',      'BY' => 'Belarus',      'BE' => 'Belgium',      'PW' => 'Belau',      'BZ' => 'Belize',      'BJ' => 'Benin',      'BM' => 'Bermuda',      'BT' => 'Bhutan',      'BO' => 'Bolivia',      'BQ' => 'Bonaire, Saint Eustatius and Saba',      'BA' => 'Bosnia and Herzegovina',      'BW' => 'Botswana',      'BV' => 'Bouvet Island',      'BR' => 'Brazil',      'IO' => 'British Indian Ocean Territory',      'VG' => 'British Virgin Islands',      'BN' => 'Brunei',      'BG' => 'Bulgaria',      'BF' => 'Burkina Faso',      'BI' => 'Burundi',      'KH' => 'Cambodia',      'CM' => 'Cameroon',      'CA' => 'Canada',      'CV' => 'Cape Verde',      'KY' => 'Cayman Islands',      'CF' => 'Central African Republic',      'TD' => 'Chad',      'CL' => 'Chile',      'CN' => 'China',      'CX' => 'Christmas Island',      'CC' => 'Cocos (Keeling) Islands',      'CO' => 'Colombia',      'KM' => 'Comoros',      'CG' => 'Congo (Brazzaville)',      'CD' => 'Congo (Kinshasa)',      'CK' => 'Cook Islands',      'CR' => 'Costa Rica',      'HR' => 'Croatia',      'CU' => 'Cuba',      'CW' => 'Cura&Ccedil;ao',      'CY' => 'Cyprus',      'CZ' => 'Czech Republic',      'DK' => 'Denmark',      'DJ' => 'Djibouti',      'DM' => 'Dominica',      'DO' => 'Dominican Republic',      'EC' => 'Ecuador',      'EG' => 'Egypt',      'SV' => 'El Salvador',      'EN' => 'England',      'GQ' => 'Equatorial Guinea',      'ER' => 'Eritrea',      'EE' => 'Estonia',      'ET' => 'Ethiopia',      'FK' => 'Falkland Islands',      'FO' => 'Faroe Islands',      'FJ' => 'Fiji',      'FI' => 'Finland',      'FR' => 'France',      'GF' => 'French Guiana',      'PF' => 'French Polynesia',      'TF' => 'French Southern Territories',      'GA' => 'Gabon',      'GM' => 'Gambia',      'GE' => 'Georgia',      'DE' => 'Germany',      'GH' => 'Ghana',      'GI' => 'Gibraltar',      'GR' => 'Greece',      'GL' => 'Greenland',      'GD' => 'Grenada',      'GP' => 'Guadeloupe',      'GT' => 'Guatemala',      'GG' => 'Guernsey',      'GN' => 'Guinea',      'GW' => 'Guinea-Bissau',      'GY' => 'Guyana',      'HT' => 'Haiti',      'HM' => 'Heard Island and McDonald Islands',      'HN' => 'Honduras',      'HK' => 'Hong Kong',      'HU' => 'Hungary',      'IS' => 'Iceland',      'IN' => 'India',      'ID' => 'Indonesia',      'IR' => 'Iran',      'IQ' => 'Iraq',      'IE' => 'Republic of Ireland',      'IM' => 'Isle of Man',      'IL' => 'Israel',      'IT' => 'Italy',      'CI' => 'Ivory Coast',      'JM' => 'Jamaica',      'JP' => 'Japan',      'JE' => 'Jersey',      'JO' => 'Jordan',      'KZ' => 'Kazakhstan',      'KE' => 'Kenya',      'KI' => 'Kiribati',      'KW' => 'Kuwait',      'KG' => 'Kyrgyzstan',      'LA' => 'Laos',      'LV' => 'Latvia',      'LB' => 'Lebanon',      'LS' => 'Lesotho',      'LR' => 'Liberia',      'LY' => 'Libya',      'LI' => 'Liechtenstein',      'LT' => 'Lithuania',      'LU' => 'Luxembourg',      'MO' => 'Macao S.A.R., China',      'MK' => 'Macedonia',      'MG' => 'Madagascar',      'MW' => 'Malawi',      'MY' => 'Malaysia',      'MV' => 'Maldives',      'ML' => 'Mali',      'MT' => 'Malta',      'MH' => 'Marshall Islands',      'MQ' => 'Martinique',      'MR' => 'Mauritania',      'MU' => 'Mauritius',      'YT' => 'Mayotte',      'MX' => 'Mexico',      'FM' => 'Micronesia',      'MD' => 'Moldova',      'MC' => 'Monaco',      'MN' => 'Mongolia',      'ME' => 'Montenegro',      'MS' => 'Montserrat',      'MA' => 'Morocco',      'MZ' => 'Mozambique',      'MM' => 'Myanmar',      'NA' => 'Namibia',      'NR' => 'Nauru',      'NP' => 'Nepal',      'NL' => 'Netherlands',      'AN' => 'Netherlands Antilles',      'NC' => 'New Caledonia',      'NZ' => 'New Zealand',      'NI' => 'Nicaragua',      'NE' => 'Niger',      'NG' => 'Nigeria',      'NU' => 'Niue',      'NF' => 'Norfolk Island',      'KP' => 'North Korea',      'NO' => 'Norway',      'OM' => 'Oman',      'PK' => 'Pakistan',      'PS' => 'Palestinian Territory',      'PA' => 'Panama',      'PG' => 'Papua New Guinea',      'PY' => 'Paraguay',      'PE' => 'Peru',      'PH' => 'Philippines',      'PN' => 'Pitcairn',      'PL' => 'Poland',      'PT' => 'Portugal',      'QA' => 'Qatar',      'RE' => 'Reunion',      'RO' => 'Romania',      'RU' => 'Russia',      'RW' => 'Rwanda',      'BL' => 'Saint Barth&eacute;lemy',      'SH' => 'Saint Helena',      'KN' => 'Saint Kitts and Nevis',      'LC' => 'Saint Lucia',      'MF' => 'Saint Martin (French part)',      'SX' => 'Saint Martin (Dutch part)',      'PM' => 'Saint Pierre and Miquelon',      'VC' => 'Saint Vincent and the Grenadines',      'SM' => 'San Marino',      'SA' => 'Saudi Arabia',      'ST' => 'Scotland',      'SN' => 'Senegal',      'RS' => 'Serbia',      'SC' => 'Seychelles',      'SL' => 'Sierra Leone',      'SG' => 'Singapore',      'SK' => 'Slovakia',      'SI' => 'Slovenia',      'SB' => 'Solomon Islands',      'SO' => 'Somalia',      'ZA' => 'South Africa',      'GS' => 'South Georgia/Sandwich Islands',      'KR' => 'South Korea',      'SS' => 'South Sudan',      'ES' => 'Spain',      'LK' => 'Sri Lanka',      'SD' => 'Sudan',      'SR' => 'Suriname',      'SJ' => 'Svalbard and Jan Mayen',      'SZ' => 'Swaziland',      'SE' => 'Sweden',      'CH' => 'Switzerland',      'SY' => 'Syria',      'TW' => 'Taiwan',      'TJ' => 'Tajikistan',      'TZ' => 'Tanzania',      'TH' => 'Thailand',      'TL' => 'Timor-Leste',      'TG' => 'Togo',      'TK' => 'Tokelau',      'TO' => 'Tonga',      'TT' => 'Trinidad and Tobago',      'TN' => 'Tunisia',      'TR' => 'Turkey',      'TM' => 'Turkmenistan',      'TC' => 'Turks and Caicos Islands',      'TV' => 'Tuvalu',      'UG' => 'Uganda',      'UA' => 'Ukraine',      'AE' => 'United Arab Emirates',      'GB' => 'United Kingdom (UK)',      'US' => 'United States (US)',      'UY' => 'Uruguay',      'UZ' => 'Uzbekistan',      'VU' => 'Vanuatu',      'VA' => 'Vatican',      'VE' => 'Venezuela',      'VN' => 'Vietnam',      'WF' => 'Wallis and Futuna',      'EH' => 'Western Sahara',      'WS' => 'Western Samoa',      'YE' => 'Yemen',      'ZM' => 'Zambia',      'ZW' => 'Zimbabwe',      'WL' => 'Wales'    );  }  public static function get_country_name_by_code($code)  {    $country_code = strtoupper($code);    $countryList = self::get_all_countries();    if (!$countryList[$country_code]) {      return $country_code;    } else {      return $countryList[$country_code];    }  }  /*=================[ Nationality ]====================*/  public static function get_all_nationalities()  {    return array(      'AF' => 'Afghan',      'AL' => 'Albanian',      'DZ' => 'Algerian',      'AD' => 'Algerian',      'AO' => 'Angola',      'AI' => 'Anguilla',      'AQ' => 'Antarctica',      'AG' => 'Antigua and Barbuda',      'AR' => 'Argentine',      'AM' => 'Armenia',      'AW' => 'Aruba',      'AU' => 'Australian',      'AT' => 'Austrian',      'AZ' => 'Azerbaijan',      'BS' => 'Bahamas',      'BH' => 'Bahrain',      'BD' => 'Bangladeshi',      'BB' => 'Barbados',      'BY' => 'Belarus',      'BE' => 'Belgian',      'PW' => 'Belau',      'BZ' => 'Belize',      'BJ' => 'Benin',      'BM' => 'Bermuda',      'BT' => 'Bhutan',      'BO' => 'Bolivian',      'BQ' => 'Bonaire, Saint Eustatius and Saba',      'BA' => 'Bosnia and Herzegovina',      'BW' => 'Batswana',      'BV' => 'Bouvet Island',      'BR' => 'Brazilian',      'IO' => 'British Indian Ocean Territory',      'VG' => 'British Virgin Islands',      'BN' => 'Brunei',      'BG' => 'Bulgarian',      'BF' => 'Burkina Faso',      'BI' => 'Burundi',      'KH' => 'Cambodian',      'CM' => 'Cameroonianian',      'CA' => 'Canadian',      'CV' => 'Cape Verde',      'KY' => 'Cayman Islands',      'CF' => 'Central African Republic',      'TD' => 'Chad',      'CL' => 'Chilean',      'CN' => 'Chinese',      'CX' => 'Christmas Island',      'CC' => 'Cocos (Keeling) Islands',      'CO' => 'Colombian',      'KM' => 'Comoros',      'CG' => 'Congo (Brazzaville)',      'CD' => 'Congo (Kinshasa)',      'CK' => 'Cook Islands',      'CR' => 'Costa Rican',      'HR' => 'Croatian	',      'CU' => 'Cuban',      'CW' => 'Cura&Ccedil;ao',      'CY' => 'Cyprus',      'CZ' => 'Czech',      'DK' => 'Danish',      'DJ' => 'Djibouti',      'DM' => 'Dominica',      'DO' => 'Dominican',      'EC' => 'Ecuadorian',      'EG' => 'Egyptian',      'SV' => 'Salvadorian',      'GQ' => 'Equatorial Guinea',      'ER' => 'Eritrea',      'EE' => 'Estonian',      'ET' => 'Ethiopian',      'FK' => 'Falkland Islands',      'FO' => 'Faroe Islands',      'FJ' => 'Fijian',      'FI' => 'Finnish',      'FR' => 'French',      'GF' => 'French Guiana',      'PF' => 'French Polynesia',      'TF' => 'French Southern Territories',      'GA' => 'Gabon',      'GM' => 'Gambia',      'GE' => 'Georgia',      'DE' => 'German',      'GH' => 'Ghanaian',      'GI' => 'Gibraltar',      'GR' => 'Greek',      'GL' => 'Greenland',      'GD' => 'Grenada',      'GP' => 'Guadeloupe',      'GT' => 'Guatemalan',      'GG' => 'Guernsey',      'GN' => 'Guinea',      'GW' => 'Guinea-Bissau',      'GY' => 'Guyana',      'HT' => 'Haitian',      'HM' => 'Heard Island and McDonald Islands',      'HN' => 'Honduran',      'HK' => 'Hong Kong',      'HU' => 'Hungarian',      'IS' => 'Icelandic',      'IN' => 'Indian',      'ID' => 'Indonesian',      'IR' => 'Iranian',      'IQ' => 'Iraqi',      'IE' => 'Irish',      'IM' => 'Isle of Man',      'IL' => 'Israeli',      'IT' => 'Italian',      'CI' => 'Ivory Coast',      'JM' => 'Jamaican',      'JP' => 'Japanese',      'JE' => 'Jersey',      'JO' => 'Jordanian',      'KZ' => 'Kazakhstan',      'KE' => 'Kenyan',      'KI' => 'Kiribati',      'KW' => 'Kuwaiti',      'KG' => 'Kyrgyzstan',      'LA' => 'Lao',      'LV' => 'Latvian',      'LB' => 'Lebanese',      'LS' => 'Lesotho',      'LR' => 'Liberia',      'LY' => 'Libyan',      'LI' => 'Liechtenstein',      'LT' => 'Lithuanian',      'LU' => 'Luxembourg',      'MO' => 'Macao S.A.R., Chinese',      'MK' => 'Macedonia',      'MG' => 'Madagascar',      'MW' => 'Malawi',      'MY' => 'Malaysian',      'MV' => 'Maldives',      'ML' => 'Malian',      'MT' => 'Maltese',      'MH' => 'Marshall Islands',      'MQ' => 'Martinique',      'MR' => 'Mauritania',      'MU' => 'Mauritius',      'YT' => 'Mayotte',      'MX' => 'Mexican	',      'FM' => 'Micronesia',      'MD' => 'Moldova',      'MC' => 'Monaco',      'MN' => 'Mongolian',      'ME' => 'Montenegro',      'MS' => 'Montserrat',      'MA' => 'Moroccan',      'MZ' => 'Mozambican',      'MM' => 'Myanmar',      'NA' => 'Namibian',      'NR' => 'Nauru',      'NP' => 'Nepalese',      'NL' => 'Dutch',      'AN' => 'Netherlands Antilles',      'NC' => 'New Caledonia',      'NZ' => 'New Zealand',      'NI' => 'Nicaraguan',      'NE' => 'Niger',      'NG' => 'Nigerian',      'NU' => 'Niue',      'NF' => 'Norfolk Island',      'KP' => 'North Korea',      'NO' => 'Norwegian',      'OM' => 'Oman',      'PK' => 'Pakistani',      'PS' => 'Palestinian Territory',      'PA' => 'Panamanian',      'PG' => 'Papua New Guinea',      'PY' => 'Paraguayan',      'PE' => 'Peruvian',      'PH' => 'Philippine',      'PN' => 'Pitcairn',      'PL' => 'Polish',      'PT' => 'Portuguese',      'QA' => 'Qatar',      'RE' => 'Reunion',      'RO' => 'Romanian',      'RU' => 'Russian',      'RW' => 'Rwanda',      'BL' => 'Saint Barth&eacute;lemy',      'SH' => 'Saint Helena',      'KN' => 'Saint Kitts and Nevis',      'LC' => 'Saint Lucia',      'MF' => 'Saint Martin (French part)',      'SX' => 'Saint Martin (Dutch part)',      'PM' => 'Saint Pierre and Miquelon',      'VC' => 'Saint Vincent and the Grenadines',      'SM' => 'San Marino',      'SA' => 'Saudi',      'ST' => 'Scotland',      'SN' => 'Senegalese',      'RS' => 'Serbia',      'SC' => 'Seychelles',      'SL' => 'Sierra Leone',      'SG' => 'Singaporean',      'SK' => 'Slovak',      'SI' => 'Slovenia',      'SB' => 'Solomon Islands',      'SO' => 'Somalia',      'ZA' => 'South African',      'GS' => 'South Georgia/Sandwich Islands',      'KR' => 'Korean',      'SS' => 'South Sudanese',      'ES' => 'Spanish',      'LK' => 'Sri Lankan',      'SD' => 'Sudanese',      'SR' => 'Suriname',      'SJ' => 'Svalbard and Jan Mayen',      'SZ' => 'Swaziland',      'SE' => 'Swedish',      'CH' => 'Swiss',      'SY' => 'Syrian',      'TW' => 'Taiwanese',      'TJ' => 'Tajikistani',      'TZ' => 'Tanzania',      'TH' => 'Thai',      'TL' => 'Timor-Leste',      'TG' => 'Togo',      'TK' => 'Tokelau',      'TO' => 'Tongan',      'TT' => 'Trinidad and Tobago',      'TN' => 'Tunisian',      'TR' => 'Turkish',      'TM' => 'Turkmenistan',      'TC' => 'Turks and Caicos Islands',      'TV' => 'Tuvalu',      'UG' => 'Uganda',      'UA' => 'Ukrainian',      'AE' => 'Emirati',      'GB' => 'British (UK)',      'US' => 'American (US)',      'UY' => 'Uruguayan',      'UZ' => 'Uzbekistan',      'VU' => 'Vanuatu',      'VA' => 'Vatican',      'VE' => 'Venezuelan',      'VN' => 'Vietnamese',      'WF' => 'Wallis and Futuna',      'EH' => 'Western Sahara',      'WS' => 'Western Samoa',      'YE' => 'Yemen',      'ZM' => 'Zambian',      'ZW' => 'Zimbabwean',      'WL' => 'Welsh'    );  }  public static function get_nationality_name_by_code($code)  {    $nationality_code = strtoupper($code);    $nationalityList = self::get_all_nationalities();    if (!$nationalityList[$nationality_code]) {      return $nationality_code;    } else {      return $nationalityList[$nationality_code];    }  }  /*=================[ Table ]====================*/  public function application_table()  {    global $wpdb;    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');    $application_table_name = $wpdb->prefix . "application";  //get the database table prefix to create my new table    if ($wpdb->get_var("SHOW TABLES LIKE '$application_table_name'") != $application_table_name) {      if (!empty($wpdb->charset)) {        $charset_collate = "DEFAULT CHARACTER SET $wpdb->charset";      }      if (!empty($wpdb->collate)) {        $charset_collate .= " COLLATE $wpdb->collate";      }      $sql = "CREATE TABLE $application_table_name (		  id MEDIUMINT(9) NOT NULL AUTO_INCREMENT,      post_applied varchar(255) NOT NULL,      name varchar(255) NOT NULL,      dob varchar(255) NOT NULL,      gender varchar(255) NOT NULL,      email varchar(255) NOT NULL,      contactno varchar(255) NOT NULL,      nationality varchar(255) NOT NULL,      passport varchar(255) NOT NULL,      iqamadetails varchar(255) NOT NULL,      iquamastatus varchar(255) NOT NULL,      message varchar(255) NOT NULL,      attachresume varchar(255) NOT NULL,      status int(10) NOT NULL DEFAULT '1',      browserType VARCHAR(250) NOT NULL,      ip int(11) NOT NULL,    created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,   		UNIQUE KEY id (id)		) $charset_collate;";      dbDelta($sql);    }  }  /*=================[ Store Data ]====================*/  public function save_application_data()  {    global $wpdb;    $application_table = $wpdb->prefix . "application";    $post_applied = wp_strip_all_tags($_POST['post_applied']);    $name = wp_strip_all_tags($_POST['name']);    $dob = wp_strip_all_tags($_POST['dob']);    $gender = wp_strip_all_tags($_POST['gender']);    $email = wp_strip_all_tags($_POST['email']);    $contactno = wp_strip_all_tags($_POST['contactno']);    $nationality = wp_strip_all_tags($_POST['nationality']);    $passport = wp_strip_all_tags($_POST['passport']);    $iqamadetails = wp_strip_all_tags($_POST['iqamadetails']);    $iquamastatus = wp_strip_all_tags($_POST['iquamastatus']);    $message = wp_strip_all_tags($_POST['message']);    $attachresume = wp_strip_all_tags($_POST['attachresume']);    $status = wp_strip_all_tags($_POST['status']);    $current_time = date('Y-m-d h:i:s a', time());    $current_date = date('Y-m-d');    $ip = self::getipAddr();    $ua = self::getBrowser();    if (isset($attachresume) && !empty($attachresume)) {      require_once(ABSPATH . 'wp-admin/includes/file.php');      $allowed = array("pdf" => "application/pdf", "doc" => "application/doc", "docx" => "application/docx");      $filename = $_FILES["anyfile"]["name"];      $filetypes = wp_check_filetype($attachresume);      $extention = $filetypes['ext'];      if (!array_key_exists($extention, $allowed)) {        echo json_encode(array("status" => 3, "msg" => "Something went wrong, please check your provided information. We accept only pdf,doc, and docx formats."));        exit();      } else {        $upload_dir = wp_upload_dir();        $uploads_sub_dir = $upload_dir['basedir'] . 'resume/';        if (!file_exists($uploads_sub_dir)) {          mkdir($uploads_sub_dir, 0777, true);        }        $upload_file_name = strtolower($name) . '-' . $current_date . '-applied-' . str_replace(' ', '-', $post_applied) . '-' . uniqid() . '.' . $extention;        //move_uploaded_file($_FILES['attachresume']['tmp_name'], $uploads_sub_dir . $upload_file_name);        move_uploaded_file( $_FILES["attachresume"]["tmp_name"], $uploads_sub_dir . basename($_FILES["attachresume"]["name"]));        $applicationID = $wpdb->insert($application_table, array(          "post_applied" => $post_applied,          "name" => $name,          "dob" => $dob,          "gender" => $gender,          "email" => $email,          "contactno" => $contactno,          "nationality" => $nationality,          "passport" => $passport,          "iqamadetails" => $iqamadetails,          "iquamastatus" => $iquamastatus,          "message" => $message,          "attachresume" => $upload_file_name,          "status" => $status,          "browserType" => $ua['name'] . ' version ' . $ua['version'] . ' Plateform ' . $ua['platform'],          "ip" => $ip,          "created_at" => $current_time,        ));        echo json_encode(array("status" => 1, "msg" => "We Will Consider Your CV and Call You If You are Fit for the Vacant Position"));        die();      }    } else {      echo json_encode(array("status" => 2, "msg" => "Something went wrong, please check your provided information. We accept only pdf,doc, and docx formats."));      die();    }  }  /*=================[ Get Applicant ]====================*/  public function get_all_applicant()  {    global $wpdb;    $application_table = $wpdb->prefix . "application";    $applicants = $wpdb->get_results(      $wpdb->prepare(        "SELECT * from " . $application_table . " ORDER by id DESC", ""      ), ARRAY_A    );    return $applicants;  }  public function applicant_by_id($id)  {    global $wpdb;    $application_table = $wpdb->prefix . "application";    $app_by_id = $wpdb->get_row(      $wpdb->prepare(        "SELECT * from " . $application_table . " WHERE id = %d ", $id      ), ARRAY_A    );    return $app_by_id;  }  public function bulk_application_by_id($id)  {    global $wpdb;    $application_table = $wpdb->prefix . "application";    $app_by_id = $wpdb->get_row(      $wpdb->prepare(        "SELECT * from " . $application_table . " WHERE id IN= %d ", $id      ), ARRAY_A    );    return $app_by_id;  }  /*=================[ Delete Applicant ]====================*/  public function delete_application_data()  {    global $wpdb;    $application_delete_table = $wpdb->prefix . "application";    $delete_file = self::applicant_by_id($_REQUEST['id']);    $delete_data = $wpdb->delete($application_delete_table, array(      "id" => $_REQUEST['id'],    ));    if (isset($delete_data)) {      $uploads_sub_dir = ABSPATH . 'wp-content/uploads/resume/';      unlink($uploads_sub_dir . $delete_file['attachresume']);    }    echo json_encode(array("status" => 1, "msg" => "Your data has been successfully deleted"));    wp_die();  }  public function delete_application_data_bulk()  {    global $wpdb;    $application_delete_table = $wpdb->prefix . "application";    if (isset($_POST['app_id'])) {      $app_id = trim($_POST['app_id']);      $wpdb->query(        "DELETE FROM $application_delete_table WHERE id IN($app_id)"      );    }    echo json_encode(array("status" => 1, "msg" => "Your data has been successfully deleted"));    wp_die();  }}